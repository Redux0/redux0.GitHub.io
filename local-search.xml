<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/14/SQL%E5%9F%BA%E7%A1%80/22-17-21/"/>
    <url>/2022/05/14/SQL%E5%9F%BA%E7%A1%80/22-17-21/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><p>主要内容来自<a href="https://www.lintcode.com/learn/53%E3%80%81https://www.runoob.com/sql%E3%80%82">https://www.lintcode.com/learn/53、https://www.runoob.com/sql。</a></p><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="Hello-SQL"><a href="#Hello-SQL" class="headerlink" title="Hello SQL"></a>Hello SQL</h3><p>Select ‘Hello SQL’ 会直接输出这个字符串。</p><p>记得一个语句要以分号结尾。</p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT `column1`, `column2`<br>FROM `table`;<br></code></pre></div></td></tr></table></figure><p>反引号的作用是防止与sql关键字冲突。</p><p>会选中对应的列，并且将他们的值打印出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM `table`;<br></code></pre></div></td></tr></table></figure><p>使用通配符*可以选中所有列。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT DISTINCT `column`<br>FROM `table`<br></code></pre></div></td></tr></table></figure><p>使用<strong>DISTINCT</strong>关键字，可以保证所选column中的值不重复。</p><p>⚠DISTINCT只能作用于多个列，保证返回的一组值不相同，如(1, 2)，(1,3)是符合条件的返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT `column1`,`column2`…<br>FROM `table_name`<br>WHERE `column` operator `value`;<br></code></pre></div></td></tr></table></figure><p>使用<strong>WHERE</strong>子句，可以根据列中的值筛选过滤列。</p><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO `table`<br>VALUES (value1, value2, value3,...);<br></code></pre></div></td></tr></table></figure><p>不指定列插入，VALUES对应的是数据表中的每个属性，必须一一对应，否则会报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO `table`<br>(`column1`, `column2`, `column3`,...)<br>VALUES (value1, value2, value3,...);<br></code></pre></div></td></tr></table></figure><p>指定列插入，对于指定了的列，属性要一一对应。</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE `table`<br>SET `column1`=value1,`column2`=value2,...<br>WHERE `column` operator `value`;<br></code></pre></div></td></tr></table></figure><p>更新表，设置属性为value。⚠没有where则一整列都会被更新。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DELETE FROM `table`<br>WHERE `column` operator `value`;<br></code></pre></div></td></tr></table></figure><p>从表中删除，使用where来筛选。⚠没有where则会删除所有行。</p><h3 id="小提醒"><a href="#小提醒" class="headerlink" title="小提醒"></a>小提醒</h3><ul><li>Date类型的数据和字符一样，需要使用引号括起来。但是可以用&gt;&lt;来比较日期先后。</li><li>Insert, Update的格式要记清楚。</li><li>Select就算只选中一列，也可以使用其它列的数据进行筛选，会有一张临时表（不可见）用于操作。</li><li>Select的内容可以看作是返回一个表，可以对这个表进行其他处理，而不仅仅是选中内容。</li><li>select col1, col2…可以看作选中了n个对应属性符合条件的对象（所以全表min只会选中一个），每个对象有col1,col2…这些属性。相当于一行行地遍历选中的表。（个人理解）</li></ul><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>常用的比较运算符有 <code>=</code>（等于） 、<code>!=</code>（不等于）、 <code>&lt;&gt;</code>（不等于）、<code>&lt;</code>（小于）、<code>&lt;=</code>（小于等于）、<code>&gt;</code>（大于）、<code>&gt;=</code>（大于等于），其中 <code>!=</code> 和 <code>&lt;&gt;</code> 在特殊情况下用法是不同的，这里暂时不提。</p><h3 id="And，Or，Not连接多条件"><a href="#And，Or，Not连接多条件" class="headerlink" title="And，Or，Not连接多条件"></a>And，Or，Not连接多条件</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">WHERE condition1 AND condition2;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">WHERE condition1 or condition2;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">WHERE NOT `condition`;<br></code></pre></div></td></tr></table></figure><p>可以使用括号手动控制优先级。</p><h3 id="In，Not-In，Between-And，Is-Null，Like"><a href="#In，Not-In，Between-And，Is-Null，Like" class="headerlink" title="In，Not In，Between And，Is Null，Like"></a>In，Not In，Between And，Is Null，Like</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT *<br>FROM `table`<br>WHERE `column` IN `value`;<br></code></pre></div></td></tr></table></figure><p>value的格式和Insert类似，有点像python的元组。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT *<br>FROM `teachers`<br>WHERE `country` IN (&#x27;CN&#x27;, &#x27;UK&#x27;);<br></code></pre></div></td></tr></table></figure><p>示例代码如上。</p><p>Not in则是表示不在数据组中，与python相仿。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT *<br>FROM `table`<br>WHERE `column` BETWEEN `value` AND `value`;<br></code></pre></div></td></tr></table></figure><p>Between and的实现根据数据库有所不同，区间的开闭不一定。MySQL, PostgreSQL是包含上下边界的。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT *<br>FROM `table`<br>WHERE `column` IS NULL;<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>注释</strong>：无法比较 NULL 和 0；它们是不等价的。</p><p>无法使用比较运算符来测试 NULL 值，比如 =、!= 或 &lt;&gt;。</p><p>我们必须使用 IS NULL 和 IS NOT NULL操作符。</p></blockquote><p>Is null判断是否是Null值。⚠Null不是0，也不是空值，不可比较。</p><p>Not col is null和col is not null效果相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT *<br>FROM `table`<br>WHERE `column` LIKE `value`;<br></code></pre></div></td></tr></table></figure><p>value部分类似与正则表达式。例如：’D%’ 表示以 D 开头的所有单词。</p><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>%</td><td>替代 0 个或多个字符</td></tr><tr><td>_</td><td>替代一个字符</td></tr><tr><td>[charlist]</td><td>字符列中的任何单一字符</td></tr><tr><td>或 [!charlist]</td><td>不在字符列中的任何单一字符</td></tr></tbody></table><p>选择使用qq邮箱的所有老师，返回名字和邮箱：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT name, email FROM teachers<br>WHERE email like &#x27;%@qq.com&#x27;<br></code></pre></div></td></tr></table></figure><p>⚠记得like后的部分要打引号。</p><h3 id="Order-By和Limit"><a href="#Order-By和Limit" class="headerlink" title="Order By和Limit"></a>Order By和Limit</h3><p>Order by用来对查询结果排序，可以以一个或多个列为关键字，默认按照升序排序。ASC表示升序，DESC表示降序。⚠注意是Ascend和Decrease，不要用错缩写了。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT `column_name`, `column_name`<br>FROM `table_name`<br>ORDER BY `column_name`, `column_name` ASC|DESC;<br></code></pre></div></td></tr></table></figure><p>如果有多个列，则按照列给出的先后顺序进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ORDER BY `teacher_id` ASC, `created_at` DESC;<br></code></pre></div></td></tr></table></figure><p>对于多个列，在每个列后面指定升序或降序即可，不指定则仍是默认升序。</p><p>Limit用来对查询结果数量进行约束，接受两个关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT `column`<br>FROM `table`<br>LIMIT `offset` , `count`;<br></code></pre></div></td></tr></table></figure><p>offset是起始偏移量，0代表第一条结果。</p><p>count则是结果条数。</p><p>⚠如果只有一个参数，则将其视为count，offset为0，如Limit 3代表返回前三条数据。</p><h3 id="小提醒-1"><a href="#小提醒-1" class="headerlink" title="小提醒"></a>小提醒</h3><ul><li>其它SQL常用运算符包括%(取模)，&amp;(位运算与)。</li><li>好用的combo：Sum(If(, , ))，Count() Group By。</li></ul><h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><h3 id="Avg-，As，Max-，Min-，SUM"><a href="#Avg-，As，Max-，Min-，SUM" class="headerlink" title="Avg()，As，Max()，Min()，SUM()"></a>Avg()，As，Max()，Min()，SUM()</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs msql">SELECT AVG(`column`) <br>FROM `table`;<br></code></pre></div></td></tr></table></figure><p>返回的是column中数据的平均值。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT AVG(`student_count`) AS `average_student_count`<br>FROM `courses`;<br></code></pre></div></td></tr></table></figure><p>AS的用处是在返回时显示别名，例如此处，结果的列将会显示为average_student_count。</p><p>⚠这种情况下，AS要放在from前。而如果嵌套查询，可能会把其他表用AS重命名。</p><p>其它用途包括给计算得到的新列赋予名字，修改返回列表的格式等等。</p><p>Max()/Min()返回最大/最小值，</p><p>Sum()返回一列的和。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT SUM(`column_name`) <br>FROM `table_name`;<br></code></pre></div></td></tr></table></figure><h3 id="Round-，Null-，Count"><a href="#Round-，Null-，Count" class="headerlink" title="Round()，Null()，Count()"></a>Round()，Null()，Count()</h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT ROUND(`column`, `decimals`) <br>FROM `table`;<br></code></pre></div></td></tr></table></figure><blockquote><p>ROUND() 函数始终返回一个值。当 decimals 为正数时，column 四舍五入为 decimals 所指定的小数位数。当 decimals 为负数时，column_name 则按 decimals 所指定的在小数点的左边四舍五入。</p></blockquote><p>若无decimal参数，则默认四舍五入。</p><p>⚠注意：ROUND() 返回值数据类型会被变换为一个 BIGINT 。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT ISNULL(`column`)<br>FROM `table`;<br></code></pre></div></td></tr></table></figure><p>如果 column 中的某个字段是 NULL 则返回 1，不是则返回 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT IFNULL(`column`, `value`)<br>FROM `table`;<br></code></pre></div></td></tr></table></figure><p>如果 column 中的某个字段是 NULL 则返回 value 值，不是则返回对应内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT COUNT(`column_name`)/COUNT(*) <br>FROM `table_name`;<br></code></pre></div></td></tr></table></figure><blockquote><p>COUNT() 函数用于计数，可利用其确定表中行的数目或者符合特定条件的行的数目。当COUNT() 中的参数不同时，其的用途也是有明显的不同的，主要可分为以下三种情况：COUNT(column) 、COUNT( * ) 和 COUNT(DISTINCT column) 。</p></blockquote><p>注意：COUNT()也可以用WHERE子句来筛选， COUNT(column) 与 COUNT(*) 的区别：</p><ul><li>COUNT(column) 中，如果 column 字段中的值为 NULL，则计数不会增加，而如果字段值为空字符串””，则字段值会加 1</li><li>COUNT(*) 中，除非整个记录全为 NULL，则计数不会增加，如果存在某一个记录不为 NULL，或者为空字符串””，计数值都会加 1。正常来说，表都会有主键，而主键不为空，所以 COUNT(*) 在有主键的表中等同于 COUNT(PRIMARY_KEY)，即查询有多少条记录。</li></ul><p>COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目。</p><h3 id="Now-，Curdate-，Curtime"><a href="#Now-，Curdate-，Curtime" class="headerlink" title="Now()，Curdate()，Curtime()"></a>Now()，Curdate()，Curtime()</h3><p>在 SQL 中，我们可以通过使用 <strong>NOW()<strong>、</strong>CURDATE()<strong>、</strong>CURTIME()</strong> 来获取当前的时间</p><ul><li>NOW() 可以用来返回当前日期和时间 格式：YYYY-MM-DD hh:mm:ss</li><li>CURDATE() 可以用来返回当前日期 格式：YYYY-MM-DD</li><li>CURTIME() 可以用来返回当前时间 格式：hh:mm:ss</li></ul><p>Now()可以接收一个参数，表示精确到秒的小数点后多少位，如Now(3)精确到毫秒。</p><h3 id="Date-，Time-，Extract"><a href="#Date-，Time-，Extract" class="headerlink" title="Date()，Time()，Extract()"></a>Date()，Time()，Extract()</h3><p>Date()只返回年-月-日，Time()只返回时-分-秒。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT EXTRACT(unit FROM date)<br>FROM `table`<br></code></pre></div></td></tr></table></figure><p>其中：</p><p><em>table</em> 是表格名</p><p><em>date</em> 参数是合法的日期表达式。</p><p>unit 参数是需要返回的时间部分，如 YEAR 、MONTH 、 DAY 、 HOUR 、MINUTE 、SECOND 等。</p><blockquote><p>在一般情况下，EXTRACT(unit FROM date) 与 unit() 的结果相同。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">EXTRACT(HOUR FROM `created_at`)<br></code></pre></div></td></tr></table></figure><p>上面的例子就会从created_at中提取hour作为新的一列。</p><h3 id="Date-format"><a href="#Date-format" class="headerlink" title="Date_format()"></a>Date_format()</h3><p>用于格式化输出日期。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT DATE_FORMAT(date,format);<br></code></pre></div></td></tr></table></figure><p>%m 表示月份，%d 表示日期，%Y 表示年份，%w 表示星期。⚠注意大小写有区别，Y是四位数，y是两位数。</p><details><summary>更多格式</summary><div></div>格式    描述%a    缩写星期名%b    缩写月名%c    月，数值%D    带有英文前缀的月中的天%d    月的天，数值(00-31)%e    月的天，数值(0-31)%f    微秒%H    小时 (00-23)%h    小时 (01-12)%I    小时 (01-12)%i    分钟，数值(00-59)%j    年的天 (001-366)%k    小时 (0-23)%l    小时 (1-12)%M    月名%m    月，数值(00-12)%p    AM 或 PM%r    时间，12-小时（hh:mm:ss AM 或 PM）%S    秒(00-59)%s    秒(00-59)%T    时间, 24-小时 (hh:mm:ss)%U    周 (00-53) 星期日是一周的第一天%u    周 (00-53) 星期一是一周的第一天%V    周 (01-53) 星期日是一周的第一天，与 %X 使用%v    周 (01-53) 星期一是一周的第一天，与 %x 使用%W    星期名%w    周的天 （0=星期日, 6=星期六）%X    年，其中的星期日是周的第一天，4 位，与 %V 使用%x    年，其中的星期一是周的第一天，4 位，与 %v 使用%Y    年，4 位%y    年，2 位</details><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT DATE_FORMAT(created_at, &#x27;%Y-%m-%d %H:%i:%s&#x27;)<br>AS DATE_FORMAT<br>FROM courses<br></code></pre></div></td></tr></table></figure><h3 id="Date-Add-，Date-Sub"><a href="#Date-Add-，Date-Sub" class="headerlink" title="Date_Add()，Date_Sub()"></a>Date_Add()，Date_Sub()</h3><p>Date_add()，Date_sub() 用来操作时间类型的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT DATE_ADD(`created_at`, INTERVAL 1 YEAR) AS new_created<br></code></pre></div></td></tr></table></figure><p>例如上面的例子将所有创建日期推迟一年。</p><p>Expected部分是一个字符串（如’1’），可以为负值，若为负值，则和Date_sub()效果一致。</p><h3 id="DateDiff-，TimeStampDiff"><a href="#DateDiff-，TimeStampDiff" class="headerlink" title="DateDiff()，TimeStampDiff()"></a>DateDiff()，TimeStampDiff()</h3><p>DateDiff() 计算日期差，TimeStampDiff() 计算指定类型差，type包括YEAR, MONTH, WEEK, DAY, HOUR。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT DATEDIFF(t1,t2) AS date_diff FROM courses;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT TIMESTAMPDIFF (type,t1,t2) AS year_diff；<br></code></pre></div></td></tr></table></figure><p>⚠DateDiff() 计算t1-t2，而TimeStampDiff() 计算t2-t1。</p><h3 id="小提醒-2"><a href="#小提醒-2" class="headerlink" title="小提醒"></a>小提醒</h3><ul><li>使用了函数以后记得指定别名，不然会连同函数名返回。</li><li>判断是否为null用is null，不要用=运算符。</li><li>null不能与值作比较，如果需要的话，先把null转为数值等格式，例如ifnull(referee_id,0)，如果是null则表达式为0。</li><li>注意min()，max()等，select player_id, min(event_date) as first_login，只会返回一条数据，即event_date最小的对应的那条，可用group by解决。</li></ul><h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><h3 id="Alter-Table"><a href="#Alter-Table" class="headerlink" title="Alter Table"></a>Alter Table</h3><p>操作表。添加/删除列，改变列数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE table_name<br>ADD column_name datatype;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE table_name<br>DROP COLUMN column_name;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE table_name<br>MODIFY COLUMN column_name datatype;<br></code></pre></div></td></tr></table></figure><p>⚠记得drop有一个COLUMN必须写。</p><h3 id="Desc"><a href="#Desc" class="headerlink" title="Desc"></a>Desc</h3><p>Desc用于查看表的信息，describe。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DESC table_name;<br></code></pre></div></td></tr></table></figure><h3 id="Not-Null约束"><a href="#Not-Null约束" class="headerlink" title="Not Null约束"></a>Not Null约束</h3><p>用于约束一个列不接受Null值。</p><p>例如创建表时：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Persons` (<br>    `ID` int NOT NULL,<br>    `LastName` varchar(255) NOT NULL,<br>    `FirstName` varchar(255) NOT NULL,<br>    `Age` int<br>);<br></code></pre></div></td></tr></table></figure><p>在已创建表中添加/删除Not Null约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>MODIFY `Age` int NOT NULL;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>MODIFY `Age` int NULL;<br></code></pre></div></td></tr></table></figure><p>关于Null和空串的区别见前文。</p><h3 id="Unique约束"><a href="#Unique约束" class="headerlink" title="Unique约束"></a>Unique约束</h3><p>用于约束一个列值唯一。</p><p>主键约束可以看作一种特殊的Unique约束。</p><p>在此只提供MySQL实现。</p><p>单列Unique约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Persons`<br>(<br>`P_Id` int NOT NULL,<br>`LastName` varchar(255) NOT NULL,<br>UNIQUE (`P_Id`)<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>ADD UNIQUE (`P_Id`);<br></code></pre></div></td></tr></table></figure><p>多列Unique约束并命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Persons`<br>(<br>`P_Id` int NOT NULL,<br>`LastName` varchar(255) NOT NULL,<br>CONSTRAINT uc_PersonID UNIQUE (`P_Id`,`LastName`)<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>ADD CONSTRAINT uc_PersonID UNIQUE (`P_Id`,`LastName`);<br></code></pre></div></td></tr></table></figure><p>撤销Unique约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>DROP INDEX uc_PersonID;<br></code></pre></div></td></tr></table></figure><p>⚠这里是删除INDEX。</p><h3 id="Primary-Key约束"><a href="#Primary-Key约束" class="headerlink" title="Primary Key约束"></a>Primary Key约束</h3><p>主键约束，用于唯一表示表中的每一条数据。</p><p>注意与Unique的区别：</p><ul><li>NOT NULL UNIQUE 可以将表的一列或多列定义为唯一性属性，而 PRIMARY KEY 设为多列时，<strong>仅能保证多列之和是唯一</strong>，具体到某一列可能会重复。</li><li>PRIMARY KEY 可以与外键配合，从而形成<strong>主从表</strong>的关系，而 NOT NULL UNIQUE 则做不到这一点。</li></ul><p>单列约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Persons`<br>(<br>    `P_Id` int NOT NULL,<br>    `LastName` varchar(255) NOT NULL,<br>    PRIMARY KEY (`P_Id`)<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>ADD PRIMARY KEY (`P_Id`);<br></code></pre></div></td></tr></table></figure><p>多列约束（仍然只有一个主键）：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Persons`<br>(<br>    `P_Id` int NOT NULL,<br>    `LastName` varchar(255) NOT NULL,<br>    CONSTRAINT pk_PersonID PRIMARY KEY (`P_Id`,`LastName`)<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>ADD CONSTRAINT pk_PersonID PRIMARY KEY (`P_Id`,`LastName`);<br></code></pre></div></td></tr></table></figure><p>⚠如果使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p><p>撤销约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>DROP PRIMARY KEY;<br></code></pre></div></td></tr></table></figure><h3 id="Foreign-Key约束"><a href="#Foreign-Key约束" class="headerlink" title="Foreign Key约束"></a>Foreign Key约束</h3><p>一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY。</p><p>如果一个字段 X 在一张表（表 1 ）中是关键字，而在另一张表（表 2 ）中不是关键字，则称字段 X 为表 2 的外键。</p><p>单列约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Orders`<br>(<br>`O_Id` int NOT NULL,<br>`OrderNo` int NOT NULL,<br>`P_Id` int,<br>PRIMARY KEY (O_Id),<br>FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Orders`<br>ADD FOREIGN KEY (P_Id)<br>REFERENCES Persons(P_Id);<br></code></pre></div></td></tr></table></figure><p>REFERENCES表示引用一个表。</p><p>多列约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Orders`<br>(<br>`O_Id` int NOT NULL,<br>`OrderNo` int NOT NULL,<br>`P_Id` int,<br>PRIMARY KEY (O_Id),<br>CONSTRAINT fk_PerOrders FOREIGN KEY (P_Id)<br>REFERENCES Persons(P_Id)<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Orders`<br>ADD CONSTRAINT fk_PerOrders<br>FOREIGN KEY (P_Id)<br>REFERENCES Persons(P_Id);<br></code></pre></div></td></tr></table></figure><p>撤销约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Orders`<br>DROP FOREIGN KEY fk_PerOrders;<br></code></pre></div></td></tr></table></figure><h3 id="Check，Default约束"><a href="#Check，Default约束" class="headerlink" title="Check，Default约束"></a>Check，Default约束</h3><p><strong>MYSQL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `courses`<br>(<br>`id` int,<br>`name` varchar(255),<br>`student_count` int,<br>`created_at` date,<br>`teacher_id` int,<br>CHECK (`student_count` &gt; 0)<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `courses`<br>(<br>`id` int,<br>`name` varchar(255),<br>`student_count` int,<br>`created_at` date,<br>`teacher_id` int,<br>CHECK (`student_count` &gt; 0 AND `teacher_id` &gt; 0)<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `courses` <br>ADD CHECK ( `student_count` &gt; 0);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `courses` <br>DROP CHECK chk_courses;<br></code></pre></div></td></tr></table></figure><p>不满足Check条件时，会放弃插入/修改操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Persons`<br>(<br>    `P_Id` int NOT NULL,<br>    `LastName` varchar(255) NOT NULL,<br>    `FirstName` varchar(255),<br>    `Address` varchar(255),<br>    `City` varchar(255) DEFAULT &#x27;Sandnes&#x27;<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE `Orders`<br>(<br>    `O_Id` int NOT NULL,<br>    `OrderNo` int NOT NULL,<br>    `P_Id` int,<br>    `OrderDate` date DEFAULT GETDATE()<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>ALTER `City` SET DEFAULT &#x27;SANDNES&#x27;;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE `Persons`<br>ALTER `City` DROP DEFAULT;<br></code></pre></div></td></tr></table></figure><p>Default可以使用例如GetDate()的函数。</p><p>没有指定值时，会插入默认值。</p><h3 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h3><p>简单地说，联结是一种机制，用于在一条 SELECT 语句中关联多个表，返回一组输出。</p><p>这个时候就要说一下联结中的两大主角——<strong>主键（PRIMARY KEY）</strong>和<strong>外键（FOREIGN KEY）</strong>。</p><p>以我们使用的教师表和课程表为例：</p><p><strong>courses (课程表)</strong></p><table><thead><tr><th align="center">列名</th><th align="center">类型</th><th align="center">注释</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int unsigned</td><td align="center">主键</td></tr><tr><td align="center">name</td><td align="center">varchar</td><td align="center">课程名称</td></tr><tr><td align="center">student_count</td><td align="center">int</td><td align="center">学生总数</td></tr><tr><td align="center">created_at</td><td align="center">date</td><td align="center">创建课程时间</td></tr><tr><td align="center">teacher_id</td><td align="center">int</td><td align="center">讲师 id</td></tr></tbody></table><p><strong>teachers (教师表)</strong></p><table><thead><tr><th align="center">列名</th><th align="center">类型</th><th align="center">注释</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int</td><td align="center">主键</td></tr><tr><td align="center">name</td><td align="center">varchar</td><td align="center">讲师姓名</td></tr><tr><td align="center">email</td><td align="center">varchar</td><td align="center">讲师邮箱</td></tr><tr><td align="center">age</td><td align="center">int</td><td align="center">讲师年龄</td></tr><tr><td align="center">country</td><td align="center">varchar</td><td align="center">讲师国籍</td></tr></tbody></table><p>教师表 <code>teachers</code> 中包含所有教师的信息，每个教师具有唯一的标识，这个标识被称为<strong>主键（PRIMARY KEY）</strong>，可以为 id 或其他唯一值。我们这里选择教师编号（<code>id</code>）为教师表的主键。</p><p>而在课程表 <code>courses</code> 中，除了教师编号 <code>teacher_id</code>（即教师表的主键）外不存储任何教师的信息。则教师编号为课程表的<strong>外键（FOREIGN KEY）</strong>。</p><p>教师表的主键又叫作课程表的外键，因此这两个表通过教师编号这一列关联了。</p><p>（以上内容来自<a href="https://www.lintcode.com/learn/54/110">LintCode炼码1. 联结</a>）</p><p><strong>创建联结</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">`table1`.`common_field` = `table2`.`common_field`;<br></code></pre></div></td></tr></table></figure><p><strong>JOIN连接子句</strong></p><ul><li><strong>INNER JOIN</strong>：如果表中有至少一个匹配，则返回行。</li><li><strong>LEFT JOIN</strong>：即使右表中没有匹配，也从左表返回所有的行。</li><li><strong>RIGHT JOIN</strong>：即使左表中没有匹配，也从右表返回所有的行。</li><li><strong>FULL JOIN</strong>：只要其中一个表中存在匹配，则返回行。</li><li><strong>CROSS JOIN</strong>：又称<strong>笛卡尔积</strong>，两个表数据一一对应，返回结果的行数等于两个表行数的乘积。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2019/01/sql-join.png" alt="img"></p><h3 id="小提醒-3"><a href="#小提醒-3" class="headerlink" title="小提醒"></a>小提醒</h3><ul><li>CONSTRAINT用来定义多列约束并起名，CONSTRAINT name，删除时使用DROP INDEX  name。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>testr</title>
    <link href="/2022/05/10/testr/13-53-23/"/>
    <url>/2022/05/10/testr/13-53-23/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/10/hello-world/13-45-57/"/>
    <url>/2022/05/10/hello-world/13-45-57/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
